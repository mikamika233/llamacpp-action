name: Build llama.cpp with OpenCL (CLBlast) on Ubuntu 22.04

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-opencl:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt update
        sudo rm -f /usr/local/bin/cmake
        sudo rm -f /usr/local/bin/ctest
        sudo rm -f /usr/local/bin/cpack
        sudo apt install -y build-essential ninja-build python3 git curl libcurl4-openssl-dev libssl-dev clang llvm git unzip autoconf automake libtool m4 groff perl
        
    - name: Install CMake 3.29
      run: |
        sudo apt update
        sudo apt install -y wget
        
        wget https://github.com/Kitware/CMake/releases/download/v3.29.0/cmake-3.29.0-linux-x86_64.tar.gz
        tar -zxvf cmake-3.29.0-linux-x86_64.tar.gz

        sudo mv cmake-3.29.0-linux-x86_64 /opt/cmake-3.29

    
        sudo ln -s /opt/cmake-3.29/bin/cmake /usr/local/bin/cmake
        sudo ln -s /opt/cmake-3.29/bin/ctest /usr/local/bin/ctest
        sudo ln -s /opt/cmake-3.29/bin/cpack /usr/local/bin/cpack

    
        cmake --version

    - name: Install SDK
      run: |
        cd ~
        wget https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip && \
        unzip commandlinetools-linux-8512546_latest.zip && \
        mkdir -p ~/android-sdk/cmdline-tools && \
        mv cmdline-tools latest && \
        mv latest ~/android-sdk/cmdline-tools/ && \
        rm -rf commandlinetools-linux-8512546_latest.zip

        yes | ~/android-sdk/cmdline-tools/latest/bin/sdkmanager "ndk;26.3.11579264"
    
    - name: Build libcurl for Android aarch64
      run: |
        
        cd ~ && export NDK_ROOT=~/android-sdk/ndk/26.3.11579264 && git clone https://github.com/ibaoger/libcurl-android.git && cd libcurl-android && git submodule init && git submodule update && chmod 755 build_for_android.sh && ./build_for_android.sh
        
   

    - name: Install OpenCL Headers and Library
      run: |
        mkdir -p ~/dev/llm
        cd ~/dev/llm

        git clone https://github.com/KhronosGroup/OpenCL-Headers && \
        cd OpenCL-Headers && \
        cp -r CL ~/android-sdk/ndk/26.3.11579264/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include

        cd ~/dev/llm

        git clone https://github.com/KhronosGroup/OpenCL-ICD-Loader && \
        cd OpenCL-ICD-Loader && \
        mkdir build_ndk26 && cd build_ndk26 && \
        cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_TOOLCHAIN_FILE=$HOME/android-sdk/ndk/26.3.11579264/build/cmake/android.toolchain.cmake \
          -DOPENCL_ICD_LOADER_HEADERS_DIR=$HOME/android-sdk/ndk/26.3.11579264/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include \
          -DANDROID_ABI=arm64-v8a \
          -DANDROID_PLATFORM=24 \
          -DANDROID_STL=c++_shared && \
        ninja && \
        cp libOpenCL.so ~/android-sdk/ndk/26.3.11579264/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib/aarch64-linux-android

    - name: Build llama.cpp
      run: |
        cd ~/dev/llm

        git clone https://github.com/ggml-org/llama.cpp && \
        cd llama.cpp && echo 'set(LIBOMP_PATH "/path/to/libomp.a" CACHE PATH "Path to static OpenMP runtime library (libomp.a)")' >> CMakeLists.txt
                        echo 'if(DEFINED LIBOMP_PATH AND EXISTS ${LIBOMP_PATH})' >> CMakeLists.txt
                        echo '  message(STATUS "ðŸ”§ Linking static OpenMP from: ${LIBOMP_PATH}")' >> CMakeLists.txt
                        echo '  get_property(ALL_TARGETS DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY BUILDSYSTEM_TARGETS)' >> CMakeLists.txt
                        echo '  foreach(target IN LISTS ALL_TARGETS)' >> CMakeLists.txt
                        echo '    get_target_property(TYPE ${target} TYPE)' >> CMakeLists.txt
                        echo '    if(NOT TYPE STREQUAL "EXECUTABLE" AND NOT TYPE STREQUAL "STATIC_LIBRARY" AND NOT TYPE STREQUAL "SHARED_LIBRARY")' >> CMakeLists.txt
                        echo '      continue()' >> CMakeLists.txt
                        echo '    endif()' >> CMakeLists.txt
                        echo '    if(${target} MATCHES "::")' >> CMakeLists.txt
                        echo '      continue()' >> CMakeLists.txt
                        echo '    endif()' >> CMakeLists.txt
                        echo '    get_target_property(COMPILE_OPTIONS ${target} COMPILE_OPTIONS)' >> CMakeLists.txt
                        echo '    if(COMPILE_OPTIONS)' >> CMakeLists.txt
                        echo '      list(FIND COMPILE_OPTIONS "-fopenmp" OMP_INDEX)' >> CMakeLists.txt
                        echo '      if(OMP_INDEX GREATER -1)' >> CMakeLists.txt
                        echo '        message(STATUS "âœ… Target \x27${target}\x27 uses OpenMP â€” linking libomp.a")' >> CMakeLists.txt
                        echo '        target_link_libraries(${target} ${LIBOMP_PATH} -lpthread -ldl -lm)' >> CMakeLists.txt
                        echo '      else()' >> CMakeLists.txt
                        echo '        message(STATUS "ðŸš« Target \x27${target}\x27 does NOT use OpenMP â€” skipping")' >> CMakeLists.txt
                        echo '      endif()' >> CMakeLists.txt
                        echo '    endif()' >> CMakeLists.txt
                        echo '  endforeach()' >> CMakeLists.txt
                        echo 'endif()' >> CMakeLists.txt && \
        mkdir build-android && cd build-android

        cmake .. -G Ninja \
          -DCMAKE_TOOLCHAIN_FILE=$HOME/android-sdk/ndk/26.3.11579264/build/cmake/android.toolchain.cmake \
          -DANDROID_ABI=arm64-v8a \
          -DANDROID_PLATFORM=android-28 \
          -DBUILD_SHARED_LIBS=OFF \
          -DGGML_OPENCL=ON \
          -DLLAMA_CURL=ON \
          -DCMAKE_CXX_FLAGS="-fopenmp -static-openmp" \
          -DCURL_LIBRARY=~/libcurl-android/libs/arm64-v8a/libcurl.a \
          -DCURL_INCLUDE_DIR=~/libcurl-android/jni/build/curl/arm64-v8a/include

        ninja
  
    - name: Package binaries
      run: |
        zip -r llama-opencl-build.zip ~/dev/llm/llama.cpp/build-android/bin

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: llama-opencl-build
        path: llama-opencl-build.zip

